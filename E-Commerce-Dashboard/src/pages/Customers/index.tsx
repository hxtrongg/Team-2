import React from "react";
import {
  Space,
  Table,
  Button,
  Modal,
  Form,
  Input,
  message,
  Pagination,
} from "antd";
import { EditOutlined, DeleteOutlined } from "@ant-design/icons";
import type { ColumnsType } from "antd/es/table";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosClient } from "../../library/axiosClient";
import { useNavigate, useSearchParams } from "react-router-dom";
import config from "../../constants/config";
import type { PaginationProps } from "antd";
interface DataType {
  _id?: string;
  firstName: string;
  lastName: string;
  email: string;
  phoneNumber: number;
  address: string;
  birthDay: string;
  password: string;
}
interface MyError {
  errors?: any;
  // Th√™m c√°c thu·ªôc t√≠nh kh√°c c·ªßa ƒë·ªëi t∆∞·ª£ng l·ªói n·∫øu c·∫ßn
}

const Customer = () => {
  const [messageApi, contextHolder] = message.useMessage();
  //Toggle Modal Edit
  const [isModalEditOpen, setIsModalEditOpen] = React.useState(false);
  //Toggle Modal Create
  const [isModalCreateOpen, setIsModalCreateOpen] = React.useState(false);
  //Modal x√°c nh·∫≠n x√≥a.
  const [isDeleteModalOpen, setIsDeleteModalOpen] = React.useState(false);
  const [itemToDelete, setItemToDelete] = React.useState<
    string | DataType | undefined
  >(undefined);

  const navigate = useNavigate();
  //=========================== PH√ÇN TRANG =================================//
  const [params] = useSearchParams();
  const page = params.get("page");
  const limit = params.get("limit");
  const int_page = page ? parseInt(page) : 1;
  const int_limit = limit ? parseInt(limit) : 5;
  const onChangePagination: PaginationProps["onChange"] = (pageNumber) => {
    console.log("Page: ", pageNumber);
    navigate(`/customers?page=${pageNumber}`);
  };

  //Lay danh sach danhmuc
  const getCustomers = async (page = 1, limit = 5) => {
    
    return axiosClient.get(
      config.urlAPI + `/v1/customers?page=${page}&limit=${limit}`
    );
    
  };

  // Access the client
  const queryClient = useQueryClient();

  //L·∫•y danh s√°ch v·ªÅ
  //console.log('debug_line53',config.urlAPI);
  const queryCustomer = useQuery({
    queryKey: ["customers", int_page],
    queryFn: () => getCustomers(int_page, int_limit),
  });

  console.log(
    "<<=== üöÄ queryCustomer.data ===>>",
    queryCustomer.data?.data.data
  );
  console.log(
    "<<=== üöÄ queryCustomer.error ===>>",
     queryCustomer.error);
  //======= S·ª± ki·ªán X√ìA =====//
  const fetchDelete = async (objectID: string) => {
    return axiosClient.delete(config.urlAPI + "/v1/customers/" + objectID);
  };
  // Mutations => Th√™m m·ªõi, x√≥a, edit
  const mutationDelete = useMutation({
    mutationFn: fetchDelete,
    onSuccess: () => {
      console.log("X√≥a th√†nh c√¥ng !");
      messageApi.open({
        type: "success",
        content: "X√≥a th√†nh c√¥ng !",
      });
      // L√†m t∆∞∆°i l·∫°i danh s√°ch danh m·ª•c d·ª±a tr√™n key ƒë√£ ƒë·ªãnh nghƒ©a
      queryClient.invalidateQueries({ queryKey: ["customers"] });
    },
    onError: (error) => {
      console.error("L·ªói khi g·ªçi API:", error);
  
      // Handle the error based on your requirements
      messageApi.open({
        type: "error",
        content: "ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªØ li·ªáu.",
      });
    },
  });
  

  //======= S·ª± ki·ªán EDit =====//
  const fetchUpdate = async (formData: DataType) => {
    const { _id, ...payload } = formData;
    return axiosClient.patch(config.urlAPI + "/v1/customers/" + _id, payload);
  };
  // Mutations => Th√™m m·ªõi, x√≥a, edit
  const mutationUpdate = useMutation({
    mutationFn: fetchUpdate,
    onSuccess: () => {
      console.log("S·ª≠a th√†nh c√¥ng !");
      messageApi.open({
        type: "success",
        content: "S·ª≠a th√†nh c√¥ng !",
      });
      // L√†m t∆∞∆°i l·∫°i danh s√°ch danh m·ª•c d·ª±a tr√™n key ƒë√£ ƒë·ªãnh nghƒ©a
      queryClient.invalidateQueries({ queryKey: ["customers"] });
      //·∫®n modal
      setIsModalEditOpen(false);
    },
    onError: (error) => {
      console.error("L·ªói khi g·ªçi API:", error);
  
      // Handle the error based on your requirements
      messageApi.open({
        type: "error",
        content: "ƒê√£ x·∫£y ra l·ªói khi S·ª≠a d·ªØ li·ªáu.",
      });
    },
  });

  const [updateForm] = Form.useForm();
  //Khi nh·∫•n nut OK tr√™n Modal
  const handleEditOk = () => {
    // setIsModalEditOpen(false);
    console.log("edit submit");
    //Cho submit form trong Modal
    updateForm.submit();
  };
  //Khi nh·∫•n nut Cancel tr√™n modal
  const handleEditCancel = () => {
    setIsModalEditOpen(false);
    console.log("edit cancel");
  };

  //h√†m l·∫•y th√¥ng tin t·ª´ form Edit
  const onFinishEdit = async (values: any) => {
    console.log("Th√†nh c√¥ng:", values); //=> ch√≠nh l√† th√¥ng tin ·ªü form edit
    //G·ªçi API ƒë·ªÉ update category
    mutationUpdate.mutate(values);
  };

  const onFinishEditFailed = (errorInfo: any) => {
    console.log("L·ªói:", errorInfo);
  };

  //======= S·ª± ki·ªán Create =====//
  const fetchCreate = async (formData: DataType) => {
    return axiosClient.post(config.urlAPI + "/v1/customers", formData);
  };
  // Mutations => Th√™m m·ªõi, x√≥a, edit
  const mutationCreate = useMutation({
    mutationFn: fetchCreate,
    onSuccess: () => {
      console.log("T·∫°o m·ªõi th√†nh c√¥ng !");
      messageApi.open({
        type: "success",
        content: "T·∫°o m·ªõi th√†nh c√¥ng !",
      });
      // L√†m t∆∞∆°i l·∫°i danh s√°ch danh m·ª•c d·ª±a tr√™n key ƒë√£ ƒë·ªãnh nghƒ©a
      queryClient.invalidateQueries({ queryKey: ["customers"] });
      //·∫®n modal
      setIsModalCreateOpen(false);
      createForm.resetFields(); //l√†m tr·ªëng c√°c input
    },
    onError: (error: MyError) => {
      console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
    
      // √âp ki·ªÉu error th√†nh ki·ªÉu c·ª• th·ªÉ (n·∫øu b·∫°n ch·∫Øc ch·∫Øn v·ªÅ ki·ªÉu)
      const specificError = error as { errors?: MyError };
    
      if (specificError.errors) {
        // Log ƒë·ªëi t∆∞·ª£ng l·ªói ƒë·ªÉ xem th√¥ng tin chi ti·∫øt
        console.log("ƒê·ªëi t∆∞·ª£ng l·ªói:", specificError.errors);
      }
    }
    
    
  });

  // Khi nh·∫•n n√∫t "X√°c nh·∫≠n x√≥a" tr√™n modal x√≥a
  const handleDeleteConfirm = async () => {
    // Th·ª±c hi·ªán cu·ªôc g·ªçi API ƒë·ªÉ x√≥a nh√¢n vi√™n
    await mutationDelete.mutate(itemToDelete);
    // ƒê√≥ng modal x√°c nh·∫≠n x√≥a v√† ƒë·∫∑t l·∫°i gi√° tr·ªã itemToDelete
    setIsDeleteModalOpen(false);
    setItemToDelete(undefined);
  };
  // Khi nh·∫•n n√∫t "H·ªßy" tr√™n modal x√≥a
  const handleDeleteCancel = () => {
    // ƒê√≥ng modal x√°c nh·∫≠n x√≥a v√† ƒë·∫∑t l·∫°i gi√° tr·ªã itemToDelete
    setIsDeleteModalOpen(false);
    setItemToDelete(undefined);
    // C√°c h√†nh ƒë·ªông kh√°c n·∫øu c·∫ßn
  };

  const [createForm] = Form.useForm();
  //Khi nh·∫•n nut OK tr√™n Modal
  const handleCreateOk = () => {
    // setIsModalCreateOpen(false);
    console.log("Create submit");
    //Cho submit form trong Modal
    createForm.submit();
  };
  //Khi nh·∫•n nut Cancel tr√™n modal
  const handleCreateCancel = () => {
    setIsModalCreateOpen(false);
    console.log("Create cancel");
  };


  //h√†m l·∫•y th√¥ng tin t·ª´ form Create
  const onFinishCreate = async (values: any) => {
    console.log("Th√†nh c√¥ng:", values); //=> ch√≠nh l√† th√¥ng tin ·ªü form edit
    //G·ªçi API ƒë·ªÉ update category
    mutationCreate.mutate(values);
  };

  const onFinishCreateFailed = (errorInfo: any) => {
    console.log("L·ªói:", errorInfo);
  };

  const columns: ColumnsType<DataType> = [
    {
      title: "H·ªç",
      dataIndex: "firstName",
      key: "firstName",
    },
    {
      title: "T√™n",
      dataIndex: "lastName",
      key: "lastName",
    },
    {
      title: "Email",
      dataIndex: "email",
      key: "email",
      render: (text) => <a>{text}</a>,
    },
    {
      title: "ƒêi·ªán tho·∫°i",
      dataIndex: "phoneNumber",
      key: "phoneNumber",
    },
    {
      title: "ƒê·ªãa ch·ªâ",
      dataIndex: "address",
      key: "address",
    },
    {
      title: "NƒÉm sinh",
      dataIndex: "birthDay",
      key: "birthDay",
    },
    // {
    //   title: "PassWord",
    //   dataIndex: "password",
    //   key: "password",
    // },

    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space size="middle">
          <Button
            onClick={() => {
              console.log("Edit this item");
              setIsModalEditOpen(true); //show modal edit l√™n
              updateForm.setFieldsValue(record);
            }}
          >
            <EditOutlined/>
          </Button>

          <Button
            danger
            onClick={() => {
              console.log("Delete this item", record);
              if (record && "_id" in record) {
                setItemToDelete(record);
                setIsDeleteModalOpen(true); // M·ªü modal x√°c nh·∫≠n x√≥a
              }
            }}
          >
            <DeleteOutlined/>
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <>
      {contextHolder}
      <Button
        type="primary"
        onClick={() => {
          console.log("Open Model Create Customer");
          //show modal them moi
          setIsModalCreateOpen(true);
        }}
      >
        Th√™m
      </Button>

      <Table
        pagination={false}
        columns={columns}
        key={"_id"}
        dataSource={queryCustomer.data?.data.data}
      />
      <div>
        <Pagination
          defaultCurrent={int_page}
          total={queryCustomer.data?.data.data.totalRecords}
          showSizeChanger
          defaultPageSize={int_limit}
          onChange={onChangePagination}
          showTotal={(total) => `Total ${total} items`}
        />
      </div>
      <Modal
        title="X√°c nh·∫≠n x√≥a"
        open={isDeleteModalOpen}
        onOk={handleDeleteConfirm}
        onCancel={handleDeleteCancel}
      >
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?</p>
      </Modal>
      {/* begin Edit Modal */}
      <Modal
        title="Edit Customer"
        open={isModalEditOpen}
        onOk={handleEditOk}
        onCancel={handleEditCancel}
      >
        <Form
          form={updateForm}
          name="edit-form"
          labelCol={{ span: 8 }}
          wrapperCol={{ span: 16 }}
          initialValues={{ remember: true }}
          onFinish={onFinishEdit}
          onFinishFailed={onFinishEditFailed}
          autoComplete="off"
        >
          <Form.Item<DataType>
            label="FirstName"
            name="firstName"
            rules={[
              { required: true, message: "Please input your FirstName!" },
              { min: 2, message: "T·ªëi thi·ªÉu 2 k√≠ t·ª±" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="LastName"
            name="lastName"
            rules={[
              { required: true, message: "Please input your LastName!" },
              { min: 2, message: "T·ªëi thi·ªÉu 2 k√≠ t·ª±" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="Email"
            name="email"
            rules={[
              { required: true, message: "Please input your Email!" },
              { type: "email" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="PhoneNumber"
            name="phoneNumber"
            rules={[
              { required: true, message: "Please input your Phone Number!" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="Address"
            name="address"
            rules={[{ required: true, message: "Please input your Address!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType> label="BirthDay" name="birthDay">
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="PassWord"
            name="password"
            rules={[{ required: true, message: "Please input your PassWord!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item hidden label="Id" name="_id">
            <Input />
          </Form.Item>
        </Form>
      </Modal>
      {/* End Edit Modal */}

      {/* begin Create Modal */}
      <Modal
        title="Create Customer"
        open={isModalCreateOpen}
        onOk={handleCreateOk}
        onCancel={handleCreateCancel}
      >
        <Form
          form={createForm}
          name="create-form"
          labelCol={{ span: 8 }}
          wrapperCol={{ span: 16 }}
          initialValues={{ remember: true }}
          onFinish={onFinishCreate}
          onFinishFailed={onFinishCreateFailed}
          autoComplete="off"
        >
          <Form.Item<DataType>
            label="FirstName"
            name="firstName"
            rules={[
              { required: true, message: "Please input your FirstName!" },
              { min: 2, message: "T·ªëi thi·ªÉu 2 k√≠ t·ª±" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="LastName"
            name="lastName"
            rules={[
              { required: true, message: "Please input your LastName!" },
              { min: 2, message: "T·ªëi thi·ªÉu 2 k√≠ t·ª±" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="Email"
            name="email"
            rules={[
              { required: true, message: "Please input your Email!" },
              { type: "email" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="PhoneNumber"
            name="phoneNumber"
            rules={[
              { required: true, message: "Please input your Phone Number!" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="Address"
            name="address"
            rules={[{ required: true, message: "Please input your Address!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item<DataType> label="BirthDay" name="birthDay">
            <Input />
          </Form.Item>

          <Form.Item<DataType>
            label="PassWord"
            name="password"
            rules={[{ required: true, message: "Please input your PassWord!" }]}
          >
            <Input />
          </Form.Item>
        </Form>
      </Modal>
      {/* End Create Modal */}
    </>
  );
};

export default Customer;
