import axios from 'axios';
const API_URL = 'http://localhost:3000/api/v1/auth/login';

const axiosClient = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// REQUEST
axiosClient.interceptors.request.use(
  (config) => {
    const access_token = window.localStorage.getItem('access_token');
    //Check n·∫øu c√≥ token th√¨ ƒë√≠nh k√®m token v√†o header
    if (access_token&&config.headers) {
      config.headers.Authorization = 'Bearer ' + access_token;
    }

    return config;
  },
  (error) => {
    Promise.reject(error);
  },
);

// RESPONSE TR·∫¢ V·ªÄ

axiosClient.interceptors.response.use(
  async (response) => {
    /**
     * T√πy v√†o response c·ªßa BACKEND API tr·∫£ v·ªÅ v·ªõi c·∫•u tr√∫c nh∆∞ th·∫ø n√†o 
     * b·∫°n ƒëi·ªÅu ch·ªânh l·∫°i cho ƒë√∫ng v·ªõi c√°ch code c·ªßa b·∫°n
     */
    // console.log('<<=== üöÄ axiosClient response.data  ===>>',response);
    const { access_token, refreshToken } = response.data.data;
    // khi LOGIN oK ==> L∆ØU token v√† freshTOken xu·ªëng localStorage
    if (access_token) {
      window.localStorage.setItem('access_token', access_token);
    }
    if (refreshToken) {
      window.localStorage.setItem('refreshToken', refreshToken);
    }

    return response;
  },
  async (error) => {

    //Khi l·ªói, v√† l·ªói kh√¥ng ph·∫£i 401 --> tr·∫£ l·∫°i l·ªói

    if (error?.response?.status !== 401) {
      return Promise.reject(error);
    }

    const originalConfig = error.config;

     //Khi l·ªói, v√† l·ªói 401 --> ko c√≥ quy·ªÅn truy c·∫≠p ==> ƒëi l√†m m·ªõi l·∫°i token

    if (error?.response?.status === 401 && !originalConfig.sent) {
      console.log('Error üöÄ', error);
      originalConfig.sent = true;
      try {
        // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ token th√¨ chuy·ªÉn sang trang LOGIN
        const access_token = window.localStorage.getItem('access_token');
        if (!access_token) {
          console.log('Token not found',window.location.pathname);
          //N·∫øu trang hi·ªán t·∫°i ƒëang ƒë·ª©ng kh√¥ng ph·∫£i l√† login th√¨ chuy·ªÉn h∆∞·ªõng login
          if(window.location.pathname !== '/login'){
            window.location.href = '/login';
          }
          return Promise.reject(error);
        }
        //N·∫øu t·ªìn t·∫°i token, th√¨ l√†m m·ªõi token sau m·ªói request
        //ƒê·ªÉ qu√° tr√¨nh login ko b·ªã gi√°n ƒëo·∫°n
        
        const refreshToken = window.localStorage.getItem('refreshToken');
        if (refreshToken) {
          const response = await axiosClient.post('/auth/refresh-token', {
            refreshToken: refreshToken,
          });

          const { access_token } = response.data.data;
          window.localStorage.setItem('access_token', access_token);

          originalConfig.headers = {
            ...originalConfig.headers,
            authorization: `Bearer ${access_token}`,
          };

          return axiosClient(originalConfig);
        } else {
          return Promise.reject(error);
        }
      } catch (err) {
        return Promise.reject(err);
      }
    }
  },
);

export { axiosClient };