import axios, { AxiosInstance, HttpStatusCode } from 'axios';
import { toast } from 'react-toastify';
import {
    clearLocalStorage,
    getAccessToken,
    saveAccessToken,
    saveProfile,
} from '.';

/*
 * d√πng attr access_token ƒë·ªÉ l∆∞u token thay v√¨ d√πng th·∫≥ng getAccessToken()
 * v√¨ d√πng attr trong class th√¨ n√≥ s·∫Ω l∆∞u tr√™n ram, c√≤n localStorage th√¨ l∆∞u tr√™n disk
 * ƒë·ªçc t·ª´ ram s·∫Ω lu√¥n nhanh h∆°n ƒë·ªçc t·ª´ disk
 */

class Http {
    instance: AxiosInstance;
    private accessToken: string;
    constructor() {
        this.accessToken = getAccessToken();
        this.instance = axios.create({
            baseURL: 'http://localhost:3000',
            timeout: 10000, // 10 seconds
            headers: {
                'Content-Type': 'application/json',
            },
        });

        this.instance.interceptors.request.use(
            (config) => {
                const access_token = localStorage.getItem('access_token')
                if (access_token) {
                    config.headers.Authorization = `Bearer ${access_token}`
                  }
                  return config
            },
            (error) => {
                return Promise.reject(error);
            },
        );
        // this.instance.interceptors.response.use(
        //     (response) => {
        //         const { url } = response.config;
        //         if (url === path.login || url === path.register) {
        //             const data = (response.data as AuthResponse).data;
        //             this.accessToken = data.access_token as string;
        //             saveAccessToken(this.accessToken);
        //             saveProfile(data.user);
        //         } else if (url === path.logout) {
        //             this.accessToken = '';
        //             clearLocalStorage();
        //         }
        //         console.log("response",response)
        //         return response;
        //     },
        //     (error) => {
        //         if (error.response.status === 422) {
        //             // eslint-disable-next-line @typescript-eslint/no-explicit-any
        //             const data: any | undefined = error.response?.data;
        //             const message = data?.message || error.message;
        //             toast.error(message, {
        //                 toastId: 'error',
        //             });
        //         }

        //         if (error.response.status === HttpStatusCode.Unauthorized) {
        //             clearLocalStorage();
        //         }

        //         return Promise.reject(error);
        //     },
        // );
        this.instance.interceptors.response.use(
            async (response) => {
              /**
               * T√πy v√†o response c·ªßa BACKEND API tr·∫£ v·ªÅ v·ªõi c·∫•u tr√∫c nh∆∞ th·∫ø n√†o 
               * b·∫°n ƒëi·ªÅu ch·ªânh l·∫°i cho ƒë√∫ng v·ªõi c√°ch code c·ªßa b·∫°n
               */
              console.log('<<=== üöÄ axiosClient response.data  ===>>',response.data.data);
              const { access_token, refreshToken, user } = response.data.data;
              // khi LOGIN oK ==> L∆ØU token v√† freshTOken xu·ªëng localStorage
              if (access_token) {
                window.localStorage.setItem('access_token', access_token);
              }
              if (refreshToken) {
                window.localStorage.setItem('refreshToken', refreshToken);
              }
              if (user) {
                window.localStorage.setItem('user', user);
              }

            return response;
            }, 
            (error) => {
                if (error.response.status === 422) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const data: any | undefined = error.response?.data;
                    const message = data?.message || error.message;
                    toast.error(message, {
                        toastId: 'error',
                    });
                }

                if (error.response.status === HttpStatusCode.Unauthorized) {
                    clearLocalStorage();
                }

                return Promise.reject(error);
            },
        );   
}
}

const httpRequest = new Http().instance;

export default httpRequest;
